package me.aboullaite.view;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;

import me.aboullaite.model.Employee;
//import me.aboullaite.view.PdfView.RedBorder;

/**
 * Created by aboullaite on 2017-02-25.
 */
public class PdfView extends AbstractPdfView {

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);

    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);

    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);

    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

    public static final String[] LANGUAGES = { "la", "en", "fr" };

    public static final Rectangle[] RECTANGLES = { new Rectangle(36, 581, 123, 700), new Rectangle(270, 581, 806, 700), new Rectangle(36, 200, 559, 500) };

    @Override
    protected void buildPdfDocument(final Map<String, Object> model, final Document document, final PdfWriter writer, final HttpServletRequest request,
            final HttpServletResponse response)
                    throws Exception {
        response.setHeader("Content-Disposition", "inline; filename=\"my-pdf-file.pdf\"");
        final List<Employee> users = (List<Employee>) model.get("users");
        createtoc(document, 2);
        addTitlePage(document);
        int nom = 1;
        for (final Employee u : users) {
            final Anchor anchor = new Anchor("Chapter" + nom, catFont);
            anchor.setName("Chapter" + nom);
            document.add(anchor);
            nom++;
            // final Employee u = users.get(1);
            final List<String> fields = new ArrayList<>();
            if (u.getEmployeeEmail() != null && !u.getEmployeeEmail().equals("")) {
                fields.add(u.getEmployeeEmail());
            }
            if (u.getEmployeeLastName() != null && !u.getEmployeeLastName().equals("")) {
                fields.add(u.getEmployeeLastName());
            }
            if (u.getEmployeeFirstName() != null && !u.getEmployeeFirstName().equals("")) {
                fields.add(u.getEmployeeFirstName());
            }

            final PdfContentByte cb = writer.getDirectContent();
            final ColumnText[] columns = new ColumnText[fields.size()];

            for (int la = 0; la < fields.size(); la++) {
                columns[la] = createColumn(cb, 1, fields.get(la), RECTANGLES[la]);
            }
            while (addColumns(columns)) {

                for (int la = 0; la < fields.size(); la++) {
                    final Rectangle r = RECTANGLES[la];
                    /* r.enableBorderSide(Rect); */
                    columns[la].setSimpleColumn(r);

                }
            }

            document.newPage();
        }
    }

    private void addTitlePage(final Document document) throws DocumentException {
        final Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Title of the document", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                (), smallBold));
        addEmptyLine(preface, 3);

        addEmptyLine(preface, 8);
        document.add(preface);
        // Start a new page
        document.newPage();

        /////////////////////////////////////////////////////////////////////////////

    }

    private void addEmptyLine(final Paragraph paragraph, final int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private void createtoc(final Document document, final int num) throws DocumentException {
        final Paragraph paragraph = new Paragraph("Table of content ",catFont);
        document.add(paragraph);
        for (int i = 1; i <= num; i++) {
            final Anchor anchor1 = new Anchor("chapter" + i);
            anchor1.setReference("#Chapter" + i);
            final Paragraph paragraph1 = new Paragraph();
            paragraph1.add(anchor1);
            document.add(paragraph1);
        }
        document.newPage();
    }

    private boolean addColumns(final ColumnText[] columns) throws DocumentException {
        int status = ColumnText.NO_MORE_TEXT;
        for (final ColumnText column : columns) {
            if (ColumnText.hasMoreText(column.go())) {
                status = ColumnText.NO_MORE_COLUMN;
            }
        }
        return ColumnText.hasMoreText(status);
    }

    private ColumnText createColumn(final PdfContentByte cb, final int i, final String la, final Rectangle rect) {
        final ColumnText ct = new ColumnText(cb);
        rect.enableBorderSide(Rectangle.BOX);
        ct.setSimpleColumn(rect);
        final Phrase p = new Phrase();
        p.add(la);
        ct.addText(p);
        return ct;

    }

}
